package io.bluestaggo.voxelthing.world.generation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import io.bluestaggo.voxelthing.world.block.Block;

public enum Structures {
    //Have fun editing these manually...                  dont
    Tree1(new Structure[]{s(Block.LOG, 0, 0, 0), s(Block.LOG, 0, 0, 1), s(Block.LOG, -1, 0, 0), s(Block.LOG, -1, 0, 1), s(Block.LOG, -1, -1, 1), s(Block.LOG, -1, -2, 1), s(Block.LOG, -1, -3, 1), s(Block.LOG, -1, -4, 1), s(Block.LOG, -1, -5, 1), s(Block.LOG, -1, -6, 1), s(Block.LOG, -1, -7, 1), s(Block.LOG, -1, -1, 0), s(Block.LOG, -1, -2, 0), s(Block.LOG, -1, -3, 0), s(Block.LOG, -1, -4, 0), s(Block.LOG, -1, -5, 0), s(Block.LOG, -1, -6, 0), s(Block.LOG, -1, -7, 0), s(Block.LOG, 0, -1, 0), s(Block.LOG, 0, -2, 0), s(Block.LOG, 0, -3, 0), s(Block.LOG, 0, -4, 0), s(Block.LOG, 0, -7, 0), s(Block.LOG, 0, -6, 0), s(Block.LOG, 0, -5, 0), s(Block.LOG, 0, -1, 1), s(Block.LOG, 0, -2, 1), s(Block.LOG, 0, -3, 1), s(Block.LOG, 0, -4, 1), s(Block.LOG, 0, -5, 1), s(Block.LOG, 0, -6, 1), s(Block.LOG, 0, -7, 1), s(Block.LEAVES, 1, -6, 0), s(Block.LEAVES, 2, -6, 0), s(Block.LEAVES, 3, -6, 0), s(Block.LEAVES, 1, -6, 1), s(Block.LEAVES, 2, -6, 1), s(Block.LEAVES, 3, -6, 1), s(Block.LEAVES, 0, -6, -1), s(Block.LEAVES, 0, -6, -2), s(Block.LEAVES, 0, -6, -3), s(Block.LEAVES, -1, -6, -1), s(Block.LEAVES, -1, -6, -2), s(Block.LEAVES, -1, -6, -3), s(Block.LEAVES, 2, -6, -1), s(Block.LEAVES, 1, -6, -1), s(Block.LEAVES, 1, -6, -2), s(Block.LEAVES, -2, -6, 0), s(Block.LEAVES, -3, -6, 0), s(Block.LEAVES, -4, -6, 0), s(Block.LEAVES, -2, -6, 1), s(Block.LEAVES, -3, -6, 1), s(Block.LEAVES, -4, -6, 1), s(Block.LEAVES, -2, -6, -2), s(Block.LEAVES, -2, -6, -1), s(Block.LEAVES, -3, -6, -1), s(Block.LEAVES, -1, -6, 2), s(Block.LEAVES, 0, -6, 2), s(Block.LEAVES, -1, -6, 3), s(Block.LEAVES, 0, -6, 3), s(Block.LEAVES, -1, -6, 4), s(Block.LEAVES, 0, -6, 4), s(Block.LEAVES, -3, -6, 2), s(Block.LEAVES, -2, -6, 2), s(Block.LEAVES, -2, -6, 3), s(Block.LEAVES, 2, -6, 2), s(Block.LEAVES, 1, -6, 2),
        s(Block.LEAVES, 1, -6, 3), s(Block.LEAVES, 1, -7, 1), s(Block.LEAVES, 2, -7, 1), s(Block.LEAVES, 3, -7, 1), s(Block.LEAVES, 1, -7, 0), s(Block.LEAVES, 2, -7, 0), s(Block.LEAVES, 3, -7, 0), s(Block.LEAVES, 2, -7, -1), s(Block.LEAVES, 1, -7, -1), s(Block.LEAVES, 1, -7, -2), s(Block.LEAVES, 0, -7, -1), s(Block.LEAVES, 0, -7, -2), s(Block.LEAVES, 0, -7, -3), s(Block.LEAVES, -1, -7, -1), s(Block.LEAVES, -1, -7, -2), s(Block.LEAVES, -1, -7, -3), s(Block.LEAVES, -2, -7, 0), s(Block.LEAVES, -3, -7, 0), s(Block.LEAVES, -4, -7, 0), s(Block.LEAVES, -2, -7, 1), s(Block.LEAVES, -3, -7, 1), s(Block.LEAVES, -4, -7, 1), s(Block.LEAVES, -2, -7, -2), s(Block.LEAVES, -2, -7, -1), s(Block.LEAVES, -3, -7, -1), s(Block.LEAVES, -1, -7, 2), s(Block.LEAVES, -1, -7, 3), s(Block.LEAVES, -1, -7, 4), s(Block.LEAVES, 0, -7, 2), s(Block.LEAVES, 0, -7, 3), s(Block.LEAVES, 0, -7, 4), s(Block.LEAVES, 1, -7, 2), s(Block.LEAVES, 1, -7, 3), s(Block.LEAVES, 2, -7, 2), s(Block.LEAVES, -3, -7, 2), s(Block.LEAVES, -2, -7, 2), s(Block.LEAVES, -2, -7, 3), s(Block.LOG, -1, -8, 0), s(Block.LOG, 0, -8, 0), s(Block.LOG, -1, -8, 1), s(Block.LOG, 0, -8, 1), s(Block.LOG, -1, -9, 0), s(Block.LOG, 0, -9, 0), s(Block.LOG, -1, -9, 1), s(Block.LOG, 0, -9, 1), s(Block.LOG, -1, -10, 
       1), s(Block.LOG, -1, -10, 0), s(Block.LOG, 0, -10, 0), s(Block.LOG, 0, -10, 1), s(Block.LEAVES, -1, -8, 2), s(Block.LEAVES, -1, -8, 3), s(Block.LEAVES, -1, -8, 4), s(Block.LEAVES, 0, -8, 2), s(Block.LEAVES, 0, -8, 3), s(Block.LEAVES, 0, -8, 4), s(Block.LEAVES, 1, -8, 3), s(Block.LEAVES, 1, -8, 2), s(Block.LEAVES, 2, -8, 2), s(Block.LEAVES, 1, -8, 1), s(Block.LEAVES, 2, -8, 1), s(Block.LEAVES, 3, -8, 1), s(Block.LEAVES, 2, -8, 0), s(Block.LEAVES, 3, -8, 0), s(Block.LEAVES, 1, -8, 0), s(Block.LEAVES, 2, -8, -1), s(Block.LEAVES, 1, -8, -1), s(Block.LEAVES, 1, -8, -2), s(Block.LEAVES, 0, -8, -1), s(Block.LEAVES, -1, -8, -1), s(Block.LEAVES, 0, -8, -2), s(Block.LEAVES, -1, -8, -2), s(Block.LEAVES, 0, -8, -3), s(Block.LEAVES, -1, -8, -3), s(Block.LEAVES, -2, -8, 0), s(Block.LEAVES, -2, -8, 1), s(Block.LEAVES, -3, -8, 0), s(Block.LEAVES, -3, -8, 1), s(Block.LEAVES, -4, -8, 0), s(Block.LEAVES, -2, -8, -2), s(Block.LEAVES, -2, -8, -1), s(Block.LEAVES, -3, -8, -1), s(Block.LEAVES, -4, -8, 1), s(Block.LEAVES, -2, -8, 2), s(Block.LEAVES, -3, -8, 2), s(Block.LEAVES, -2, -8, 3), s(Block.LEAVES, -2, -9, 2), s(Block.LEAVES, -3, -9, 1), s(Block.LEAVES, -3, -9, 0), s(Block.LEAVES, -2, -9, -1), s(Block.LEAVES, 0, -9, -2), s(Block.LEAVES, -1, -9, -2), s(Block.LEAVES, 1, -9, -1), s(Block.LEAVES, 2, -9, 1), s(Block.LEAVES, 2, -9, 0), s(Block.LEAVES, 1, -9, 2), s(Block.LEAVES, -1, -9, 3), s(Block.LEAVES, 0, -9, 3), s(Block.LEAVES, -1, -9, 2), s(Block.LEAVES, 0, -9, 2), s(Block.LEAVES, 1, -9, 
       1), s(Block.LEAVES, 1, -9, 0), s(Block.LEAVES, 0, -9, -1), s(Block.LEAVES, -1, -9, -1), s(Block.LEAVES, -2, -9, 0), s(Block.LEAVES, -2, -9, 1), s(Block.LEAVES, -3, -10, 0), s(Block.LEAVES, -3, -10, 1), s(Block.LEAVES, -2, -10, 0), s(Block.LEAVES, -2, -10, 1), s(Block.LEAVES, -2, -10, 2), s(Block.LEAVES, -1, -10, 2), s(Block.LEAVES, -1, -10, 3), s(Block.LEAVES, 0, -10, 2), s(Block.LEAVES, 0, -10, 3), s(Block.LEAVES, 1, -10, 2), s(Block.LEAVES, 1, -10, 1), s(Block.LEAVES, 2, -10, 1), s(Block.LEAVES, 1, -10, 0), s(Block.LEAVES, 2, -10, 0), s(Block.LEAVES, 1, -10, -1), s(Block.LEAVES, 0, -10, -1), s(Block.LEAVES, 0, -10, -2), s(Block.LEAVES, -1, -10, -1), s(Block.LEAVES, -1, -10, -2), s(Block.LEAVES, -2, -10, -1), s(Block.LOG, 0, -11, 1)
       , s(Block.LOG, 0, -11, 0), s(Block.LOG, -1, -11, 1), s(Block.LOG, -1, -11, 0), s(Block.LOG, 0, -12, 1), s(Block.LOG, -1, -12, 0), s(Block.LEAVES, 0, -11, -1), s(Block.LEAVES, 0, -11, -2), s(Block.LEAVES, -1, -11, -1), s(Block.LEAVES, -1, -11, -2), s(Block.LEAVES, -2, -11, -1), s(Block.LEAVES, -2, -11, 0), s(Block.LEAVES, -3, -11, 0), s(Block.LEAVES, -2, -11, 1), s(Block.LEAVES, -3, -11, 1), s(Block.LEAVES, -2, -11, 2), s(Block.LEAVES, -1, -11, 2), s(Block.LEAVES, -1, -11, 3), s(Block.LEAVES, 0, -11, 2), s(Block.LEAVES, 0, -11, 3), s(Block.LEAVES, 1, -11, 2), s(Block.LEAVES, 1, -11, 1), s(Block.LEAVES, 2, -11, 1), s(Block.LEAVES, 1, -11, 0), s(Block.LEAVES, 2, -11, 0), s(Block.LEAVES, 1, -11, -1), s(Block.LEAVES, 1, -12, 1), s(Block.LEAVES, 1, -12, 0), s(Block.LEAVES, 0, -12, -1), s(Block.LEAVES, -1, -12, -1), s(Block.LEAVES, -2, -12, 0), s(Block.LEAVES, -2, -12, 1), s(Block.LEAVES, 0, -12, 2), s(Block.LEAVES, -1, -12, 2), s(Block.LEAVES, -1, -12, 1), s(Block.LEAVES, 0, -12, 0), s(Block.LEAVES, 0, -13, -1), s(Block.LEAVES, -1, -13, -1), s(Block.LEAVES, 0, -13, 0), s(Block.LEAVES, 0, -13, 1), s(Block.LEAVES, -1, -13, 0), s(Block.LEAVES, -1, -13, 1), s(Block.LEAVES, -2, -13, 0), s(Block.LEAVES, -2, -13, 1), s(Block.LEAVES, -1, -13, 2), s(Block.LEAVES, 0, -13, 2), s(Block.LEAVES, 1, -13, 1), s(Block.LEAVES, 1, -13, 0), s(Block.LEAVES, 1, -14, 1), s(Block.LEAVES, 1, -14, 0), s(Block.LEAVES, -1, -14, -1), s(Block.LEAVES, 0, -14, -1), s(Block.LEAVES, -2, -14, 1), s(Block.LEAVES, -2, -14, 0), s(Block.LEAVES, -1, -14, 2), s(Block.LEAVES, 0, -14, 2), s(Block.LEAVES, -1, -14, 1), s(Block.LEAVES, 0, -14, 1), s(Block.LEAVES, -1, -14, 0), s(Block.LEAVES, 0, -14, 0), s(Block.LEAVES, -1, -15, 1), s(Block.LEAVES, 0, -15, 0), s(Block.LEAVES, 0, -15, 1), s(Block.LEAVES, -1, -15, 0), s(Block.LEAVES, -1, -16, 0), s(Block.LEAVES, -1, -17, 0), s(Block.LEAVES, 0, -16, 0), s(Block.LEAVES, 0, -17, 0), s(Block.LEAVES, -1, -16, 1), s(Block.LEAVES, -1, -17, 1), s(Block.LEAVES, 0, -16, 1), s(Block.LEAVES, 0, -17, 1)}),
    Tree2(new Structure[]{}),
    Tree3(new Structure[]{}),
    House(new Structure[]{});

    private Structure[] blocks;

    private Structures(Structure[] blocks) {
        this.blocks = blocks;
    }

    public Structure[] getStructure() {
        return this.blocks;
    }

    	//shorter way of new Structure
	public static Structure s(Block block, int x, int y, int z) {
		return new Structure(block, x, y, z);
	}

    
}
