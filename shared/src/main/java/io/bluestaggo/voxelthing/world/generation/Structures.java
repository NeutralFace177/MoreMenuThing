package io.bluestaggo.voxelthing.world.generation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import io.bluestaggo.voxelthing.world.block.Block;

public enum Structures {
    //Have fun editing these manually...                  dont
    Tree1(new blockInStructure[]{s(Block.LOG, 0, 0, 0), s(Block.LOG, 0, 0, 1), s(Block.LOG, -1, 0, 0), s(Block.LOG, -1, 0, 1), s(Block.LOG, -1, -1, 1), s(Block.LOG, -1, -2, 1), s(Block.LOG, -1, -3, 1), s(Block.LOG, -1, -4, 1), s(Block.LOG, -1, -5, 1), s(Block.LOG, -1, -6, 1), s(Block.LOG, -1, -7, 1), s(Block.LOG, -1, -1, 0), s(Block.LOG, -1, -2, 0), s(Block.LOG, -1, -3, 0), s(Block.LOG, -1, -4, 0), s(Block.LOG, -1, -5, 0), s(Block.LOG, -1, -6, 0), s(Block.LOG, -1, -7, 0), s(Block.LOG, 0, -1, 0), s(Block.LOG, 0, -2, 0), s(Block.LOG, 0, -3, 0), s(Block.LOG, 0, -4, 0), s(Block.LOG, 0, -7, 0), s(Block.LOG, 0, -6, 0), s(Block.LOG, 0, -5, 0), s(Block.LOG, 0, -1, 1), s(Block.LOG, 0, -2, 1), s(Block.LOG, 0, -3, 1), s(Block.LOG, 0, -4, 1), s(Block.LOG, 0, -5, 1), s(Block.LOG, 0, -6, 1), s(Block.LOG, 0, -7, 1), s(Block.LEAVES, 1, -6, 0), s(Block.LEAVES, 2, -6, 0), s(Block.LEAVES, 3, -6, 0), s(Block.LEAVES, 1, -6, 1), s(Block.LEAVES, 2, -6, 1), s(Block.LEAVES, 3, -6, 1), s(Block.LEAVES, 0, -6, -1), s(Block.LEAVES, 0, -6, -2), s(Block.LEAVES, 0, -6, -3), s(Block.LEAVES, -1, -6, -1), s(Block.LEAVES, -1, -6, -2), s(Block.LEAVES, -1, -6, -3), s(Block.LEAVES, 2, -6, -1), s(Block.LEAVES, 1, -6, -1), s(Block.LEAVES, 1, -6, -2), s(Block.LEAVES, -2, -6, 0), s(Block.LEAVES, -3, -6, 0), s(Block.LEAVES, -4, -6, 0), s(Block.LEAVES, -2, -6, 1), s(Block.LEAVES, -3, -6, 1), s(Block.LEAVES, -4, -6, 1), s(Block.LEAVES, -2, -6, -2), s(Block.LEAVES, -2, -6, -1), s(Block.LEAVES, -3, -6, -1), s(Block.LEAVES, -1, -6, 2), s(Block.LEAVES, 0, -6, 2), s(Block.LEAVES, -1, -6, 3), s(Block.LEAVES, 0, -6, 3), s(Block.LEAVES, -1, -6, 4), s(Block.LEAVES, 0, -6, 4), s(Block.LEAVES, -3, -6, 2), s(Block.LEAVES, -2, -6, 2), s(Block.LEAVES, -2, -6, 3), s(Block.LEAVES, 2, -6, 2), s(Block.LEAVES, 1, -6, 2),
        s(Block.LEAVES, 1, -6, 3), s(Block.LEAVES, 1, -7, 1), s(Block.LEAVES, 2, -7, 1), s(Block.LEAVES, 3, -7, 1), s(Block.LEAVES, 1, -7, 0), s(Block.LEAVES, 2, -7, 0), s(Block.LEAVES, 3, -7, 0), s(Block.LEAVES, 2, -7, -1), s(Block.LEAVES, 1, -7, -1), s(Block.LEAVES, 1, -7, -2), s(Block.LEAVES, 0, -7, -1), s(Block.LEAVES, 0, -7, -2), s(Block.LEAVES, 0, -7, -3), s(Block.LEAVES, -1, -7, -1), s(Block.LEAVES, -1, -7, -2), s(Block.LEAVES, -1, -7, -3), s(Block.LEAVES, -2, -7, 0), s(Block.LEAVES, -3, -7, 0), s(Block.LEAVES, -4, -7, 0), s(Block.LEAVES, -2, -7, 1), s(Block.LEAVES, -3, -7, 1), s(Block.LEAVES, -4, -7, 1), s(Block.LEAVES, -2, -7, -2), s(Block.LEAVES, -2, -7, -1), s(Block.LEAVES, -3, -7, -1), s(Block.LEAVES, -1, -7, 2), s(Block.LEAVES, -1, -7, 3), s(Block.LEAVES, -1, -7, 4), s(Block.LEAVES, 0, -7, 2), s(Block.LEAVES, 0, -7, 3), s(Block.LEAVES, 0, -7, 4), s(Block.LEAVES, 1, -7, 2), s(Block.LEAVES, 1, -7, 3), s(Block.LEAVES, 2, -7, 2), s(Block.LEAVES, -3, -7, 2), s(Block.LEAVES, -2, -7, 2), s(Block.LEAVES, -2, -7, 3), s(Block.LOG, -1, -8, 0), s(Block.LOG, 0, -8, 0), s(Block.LOG, -1, -8, 1), s(Block.LOG, 0, -8, 1), s(Block.LOG, -1, -9, 0), s(Block.LOG, 0, -9, 0), s(Block.LOG, -1, -9, 1), s(Block.LOG, 0, -9, 1), s(Block.LOG, -1, -10, 
       1), s(Block.LOG, -1, -10, 0), s(Block.LOG, 0, -10, 0), s(Block.LOG, 0, -10, 1), s(Block.LEAVES, -1, -8, 2), s(Block.LEAVES, -1, -8, 3), s(Block.LEAVES, -1, -8, 4), s(Block.LEAVES, 0, -8, 2), s(Block.LEAVES, 0, -8, 3), s(Block.LEAVES, 0, -8, 4), s(Block.LEAVES, 1, -8, 3), s(Block.LEAVES, 1, -8, 2), s(Block.LEAVES, 2, -8, 2), s(Block.LEAVES, 1, -8, 1), s(Block.LEAVES, 2, -8, 1), s(Block.LEAVES, 3, -8, 1), s(Block.LEAVES, 2, -8, 0), s(Block.LEAVES, 3, -8, 0), s(Block.LEAVES, 1, -8, 0), s(Block.LEAVES, 2, -8, -1), s(Block.LEAVES, 1, -8, -1), s(Block.LEAVES, 1, -8, -2), s(Block.LEAVES, 0, -8, -1), s(Block.LEAVES, -1, -8, -1), s(Block.LEAVES, 0, -8, -2), s(Block.LEAVES, -1, -8, -2), s(Block.LEAVES, 0, -8, -3), s(Block.LEAVES, -1, -8, -3), s(Block.LEAVES, -2, -8, 0), s(Block.LEAVES, -2, -8, 1), s(Block.LEAVES, -3, -8, 0), s(Block.LEAVES, -3, -8, 1), s(Block.LEAVES, -4, -8, 0), s(Block.LEAVES, -2, -8, -2), s(Block.LEAVES, -2, -8, -1), s(Block.LEAVES, -3, -8, -1), s(Block.LEAVES, -4, -8, 1), s(Block.LEAVES, -2, -8, 2), s(Block.LEAVES, -3, -8, 2), s(Block.LEAVES, -2, -8, 3), s(Block.LEAVES, -2, -9, 2), s(Block.LEAVES, -3, -9, 1), s(Block.LEAVES, -3, -9, 0), s(Block.LEAVES, -2, -9, -1), s(Block.LEAVES, 0, -9, -2), s(Block.LEAVES, -1, -9, -2), s(Block.LEAVES, 1, -9, -1), s(Block.LEAVES, 2, -9, 1), s(Block.LEAVES, 2, -9, 0), s(Block.LEAVES, 1, -9, 2), s(Block.LEAVES, -1, -9, 3), s(Block.LEAVES, 0, -9, 3), s(Block.LEAVES, -1, -9, 2), s(Block.LEAVES, 0, -9, 2), s(Block.LEAVES, 1, -9, 
       1), s(Block.LEAVES, 1, -9, 0), s(Block.LEAVES, 0, -9, -1), s(Block.LEAVES, -1, -9, -1), s(Block.LEAVES, -2, -9, 0), s(Block.LEAVES, -2, -9, 1), s(Block.LEAVES, -3, -10, 0), s(Block.LEAVES, -3, -10, 1), s(Block.LEAVES, -2, -10, 0), s(Block.LEAVES, -2, -10, 1), s(Block.LEAVES, -2, -10, 2), s(Block.LEAVES, -1, -10, 2), s(Block.LEAVES, -1, -10, 3), s(Block.LEAVES, 0, -10, 2), s(Block.LEAVES, 0, -10, 3), s(Block.LEAVES, 1, -10, 2), s(Block.LEAVES, 1, -10, 1), s(Block.LEAVES, 2, -10, 1), s(Block.LEAVES, 1, -10, 0), s(Block.LEAVES, 2, -10, 0), s(Block.LEAVES, 1, -10, -1), s(Block.LEAVES, 0, -10, -1), s(Block.LEAVES, 0, -10, -2), s(Block.LEAVES, -1, -10, -1), s(Block.LEAVES, -1, -10, -2), s(Block.LEAVES, -2, -10, -1), s(Block.LOG, 0, -11, 1)
       , s(Block.LOG, 0, -11, 0), s(Block.LOG, -1, -11, 1), s(Block.LOG, -1, -11, 0), s(Block.LOG, 0, -12, 1), s(Block.LOG, -1, -12, 0), s(Block.LEAVES, 0, -11, -1), s(Block.LEAVES, 0, -11, -2), s(Block.LEAVES, -1, -11, -1), s(Block.LEAVES, -1, -11, -2), s(Block.LEAVES, -2, -11, -1), s(Block.LEAVES, -2, -11, 0), s(Block.LEAVES, -3, -11, 0), s(Block.LEAVES, -2, -11, 1), s(Block.LEAVES, -3, -11, 1), s(Block.LEAVES, -2, -11, 2), s(Block.LEAVES, -1, -11, 2), s(Block.LEAVES, -1, -11, 3), s(Block.LEAVES, 0, -11, 2), s(Block.LEAVES, 0, -11, 3), s(Block.LEAVES, 1, -11, 2), s(Block.LEAVES, 1, -11, 1), s(Block.LEAVES, 2, -11, 1), s(Block.LEAVES, 1, -11, 0), s(Block.LEAVES, 2, -11, 0), s(Block.LEAVES, 1, -11, -1), s(Block.LEAVES, 1, -12, 1), s(Block.LEAVES, 1, -12, 0), s(Block.LEAVES, 0, -12, -1), s(Block.LEAVES, -1, -12, -1), s(Block.LEAVES, -2, -12, 0), s(Block.LEAVES, -2, -12, 1), s(Block.LEAVES, 0, -12, 2), s(Block.LEAVES, -1, -12, 2), s(Block.LEAVES, -1, -12, 1), s(Block.LEAVES, 0, -12, 0), s(Block.LEAVES, 0, -13, -1), s(Block.LEAVES, -1, -13, -1), s(Block.LEAVES, 0, -13, 0), s(Block.LEAVES, 0, -13, 1), s(Block.LEAVES, -1, -13, 0), s(Block.LEAVES, -1, -13, 1), s(Block.LEAVES, -2, -13, 0), s(Block.LEAVES, -2, -13, 1), s(Block.LEAVES, -1, -13, 2), s(Block.LEAVES, 0, -13, 2), s(Block.LEAVES, 1, -13, 1), s(Block.LEAVES, 1, -13, 0), s(Block.LEAVES, 1, -14, 1), s(Block.LEAVES, 1, -14, 0), s(Block.LEAVES, -1, -14, -1), s(Block.LEAVES, 0, -14, -1), s(Block.LEAVES, -2, -14, 1), s(Block.LEAVES, -2, -14, 0), s(Block.LEAVES, -1, -14, 2), s(Block.LEAVES, 0, -14, 2), s(Block.LEAVES, -1, -14, 1), s(Block.LEAVES, 0, -14, 1), s(Block.LEAVES, -1, -14, 0), s(Block.LEAVES, 0, -14, 0), s(Block.LEAVES, -1, -15, 1), s(Block.LEAVES, 0, -15, 0), s(Block.LEAVES, 0, -15, 1), s(Block.LEAVES, -1, -15, 0), s(Block.LEAVES, -1, -16, 0), s(Block.LEAVES, -1, -17, 0), s(Block.LEAVES, 0, -16, 0), s(Block.LEAVES, 0, -17, 0), s(Block.LEAVES, -1, -16, 1), s(Block.LEAVES, -1, -17, 1), s(Block.LEAVES, 0, -16, 1), s(Block.LEAVES, 0, -17, 1)}),
    Tree2(new blockInStructure[]{}),
    Tree3(new blockInStructure[]{}),
    House(new blockInStructure[]{s(Block.BRICKS, 0, 0, 0), s(Block.BRICKS, 0, 0, -1), s(Block.BRICKS, 0, 0, -2), s(Block.BRICKS, 0, 0, -3), s(Block.BRICKS, 0, 0, -4), s(Block.BRICKS, 1, 0, -4), s(Block.BRICKS, 2, 0, -4), s(Block.BRICKS, 3, 0, -4), s(Block.BRICKS, 4, 0, -4), s(Block.BRICKS, 5, 0, -4), s(Block.BRICKS, 6, 0, -4), s(Block.BRICKS, 7, 0, -4), s(Block.BRICKS, 0, 0, 1), s(Block.BRICKS, 1, 0, 1), s(Block.BRICKS, 2, 0, 1), s(Block.BRICKS, 3, 0, 1), s(Block.BRICKS, 4, 0, 1), s(Block.BRICKS, 5, 0, 1), s(Block.BRICKS, 7, 0, -3), s(Block.BRICKS, 7, 0, 0), s(Block.BRICKS, 6, 0, 1), s(Block.BRICKS, 7, 0, 1), s(Block.WOOL[15], 1, 0, -3), s(Block.WOOL[15], 2, 0, -3), s(Block.WOOL[15], 3, 0, -3), s(Block.WOOL[15], 4, 0, -3), s(Block.WOOL[15], 6, 0, -3), s(Block.WOOL[15], 5, 0, -3), s(Block.WOOL[15], 6, 0, -2), s(Block.WOOL[15], 6, 0, -1), s(Block.WOOL[15], 6, 0, 0), s(Block.WOOL[15], 5, 0, 0), s(Block.WOOL[15], 4, 0, 0), s(Block.WOOL[15], 3, 0, 0), s(Block.WOOL[15], 1, 0, 0), s(Block.WOOL[15], 2, 0, 0), s(Block.WOOL[15], 5, 0, -1), s(Block.WOOL[15], 5, 0, -2), s(Block.WOOL[15], 4, 0, -2), s(Block.WOOL[15], 
        4, 0, -1), s(Block.WOOL[15], 1, 0, -2), s(Block.WOOL[15], 1, 0, -1), s(Block.WOOL[15], 2, 0, -2), s(Block.WOOL[15], 2, 0, -1), s(Block.WOOL[15], 3, 0, -2), s(Block.WOOL[15], 3, 0, -1), s(Block.PLANKS, 0, -1, 1), s(Block.PLANKS, 1, -1, 1), s(Block.PLANKS, 2, -1, 1), s(Block.PLANKS, 3, -1, 1), s(Block.PLANKS, 4, -1, 1), s(Block.PLANKS, 5, -1, 1), s(Block.PLANKS, 6, -1, 1), s(Block.PLANKS, 7, -1, 1), s(Block.PLANKS, 0, -1, 0), s(Block.PLANKS, 0, -1, -1), s(Block.PLANKS, 0, -1, -2), s(Block.PLANKS, 0, -1, -3), s(Block.PLANKS, 0, -1, -4), s(Block.PLANKS, 1, -1, -4), s(Block.PLANKS, 2, -1, -4), s(Block.PLANKS, 3, -1, -4), s(Block.PLANKS, 4, -1, -4), s(Block.PLANKS, 5, -1, -4), s(Block.PLANKS, 6, -1, -4), s(Block.PLANKS, 7, -1, -4), s(Block.PLANKS, 7, -1, 0), s(Block.PLANKS, 7, -1, -3), s(Block.LOG, -1, 0, 2), s(Block.LOG, -1, -1, 2), s(Block.LOG, -1, 0, -5), s(Block.LOG, -1, -1, -5), s(Block.LOG, 8, 0, -5), s(Block.LOG, 8, -1, -5), s(Block.LOG, 8, 0, 2), s(Block.LOG, 8, -1, 2), s(Block.LOG, 8, -2, 2), s(Block.LOG, 8, -2, -5), s(Block.LOG, -1, -2, -5), s(Block.LOG, -1, -2, 2), s(Block.PLANKS, 0, -2, 1), s(Block.PLANKS, 3, -2, 1), s(Block.PLANKS, 4, -2, 1), s(Block.PLANKS, 7, -2, 1), s(Block.PLANKS, 7, -2, 0), s(Block.PLANKS, 0, -2, 0), s(Block.PLANKS, 0, -2, -1), s(Block.PLANKS, 0, -2, -3), s(Block.PLANKS, 0, -2, -2), s(Block.PLANKS, 0, -2, -4), s(Block.PLANKS, 3, -2, -4), s(Block.PLANKS, 4, -2, -4), s(Block.PLANKS, 7, -2, -3), s(Block.PLANKS, 7, -2, -4), s(Block.COBBLESTONE, 8, -3, 2), s(Block.COBBLESTONE, 
        -1, -3, 2), s(Block.COBBLESTONE, 0, -3, 2), s(Block.COBBLESTONE, 1, -3, 2), s(Block.COBBLESTONE, 2, -3, 2), s(Block.COBBLESTONE, 3, -3, 2), s(Block.COBBLESTONE, 4, -3, 2), s(Block.COBBLESTONE, 5, -3, 2), s(Block.COBBLESTONE, 7, -3, 2), s(Block.COBBLESTONE, 6, -3, 2), s(Block.COBBLESTONE, 8, -3, 1), s(Block.COBBLESTONE, 7, -3, 1), s(Block.COBBLESTONE, 6, -3, 1), s(Block.COBBLESTONE, 5, -3, 1), s(Block.COBBLESTONE, 3, -3, 1), s(Block.COBBLESTONE, 4, -3, 1), s(Block.COBBLESTONE, -1, -3, 1), s(Block.COBBLESTONE, 0, -3, 1), s(Block.COBBLESTONE, 1, -3, 1), s(Block.COBBLESTONE, 2, -3, 1), s(Block.COBBLESTONE, -1, -4, 1), s(Block.COBBLESTONE, 0, -4, 1), 
        s(Block.COBBLESTONE, 1, -4, 1), s(Block.COBBLESTONE, 2, -4, 1), s(Block.COBBLESTONE, 3, -4, 1), s(Block.COBBLESTONE, 4, -4, 1), s(Block.COBBLESTONE, 5, -4, 1), s(Block.COBBLESTONE, 6, -4, 1), s(Block.COBBLESTONE, 7, -4, 1), s(Block.COBBLESTONE, 8, -4, 1), s(Block.COBBLESTONE, -1, -3, -5), s(Block.COBBLESTONE, 0, -3, -5), s(Block.COBBLESTONE, 1, -3, -5), s(Block.COBBLESTONE, 2, -3, -5), s(Block.COBBLESTONE, 3, -3, -5), s(Block.COBBLESTONE, 4, -3, -5), s(Block.COBBLESTONE, 5, -3, -5), s(Block.COBBLESTONE, 6, -3, -5), s(Block.COBBLESTONE, 7, -3, -5), s(Block.COBBLESTONE, 8, -3, -5), s(Block.COBBLESTONE, 8, -3, -4), s(Block.COBBLESTONE, 7, -3, -4), s(Block.COBBLESTONE, 6, -3, -4), s(Block.COBBLESTONE, 5, -3, -4), s(Block.COBBLESTONE, 4, -3, -4), s(Block.COBBLESTONE, 3, -3, -4), s(Block.COBBLESTONE, 2, -3, -4), s(Block.COBBLESTONE, 1, -3, -4), s(Block.COBBLESTONE, 
        0, -3, -4), s(Block.COBBLESTONE, -1, -3, -4), s(Block.COBBLESTONE, -1, -4, -4), s(Block.COBBLESTONE, 0, -4, -4), s(Block.COBBLESTONE, 1, -4, -4), s(Block.COBBLESTONE, 2, -4, -4), s(Block.COBBLESTONE, 3, -4, -4), s(Block.COBBLESTONE, 4, -4, -4), s(Block.COBBLESTONE, 5, -4, -4), s(Block.COBBLESTONE, 6, -4, -4), s(Block.COBBLESTONE, 7, -4, -4), s(Block.COBBLESTONE, 8, -4, -4), s(Block.COBBLESTONE, -1, -4, -3), s(Block.COBBLESTONE, 0, -4, -3), s(Block.COBBLESTONE, 1, -4, -3), s(Block.COBBLESTONE, 2, -4, -3), s(Block.COBBLESTONE, 3, -4, -3), s(Block.COBBLESTONE, 8, -4, -3), s(Block.COBBLESTONE, 7, -4, -3), s(Block.COBBLESTONE, 6, -4, -3), s(Block.COBBLESTONE, 5, -4, -3), s(Block.COBBLESTONE, 4, -4, -3), s(Block.COBBLESTONE, 8, -4, 0), s(Block.COBBLESTONE, 7, -4, 0), s(Block.COBBLESTONE, 6, -4, 0), s(Block.COBBLESTONE, 5, -4, 0), s(Block.COBBLESTONE, -1, -4, 0), s(Block.COBBLESTONE, 0, -4, 0), s(Block.COBBLESTONE, 1, -4, 0), s(Block.COBBLESTONE, 2, -4, 0), s(Block.COBBLESTONE, 3, -4, 0), s(Block.COBBLESTONE, 4, -4, 0), s(Block.COBBLESTONE, -1, -5, 0), s(Block.COBBLESTONE, 0, -5, 
        0), s(Block.COBBLESTONE, 1, -5, 0), s(Block.COBBLESTONE, 3, -5, 0), s(Block.COBBLESTONE, 2, -5, 0), s(Block.COBBLESTONE, 4, -5, 0), s(Block.COBBLESTONE, 5, -5, 0), s(Block.COBBLESTONE, 6, -5, 0), s(Block.COBBLESTONE, 7, -5, 0), s(Block.COBBLESTONE, 8, -5, 0), s(Block.COBBLESTONE, 8, -5, -3), s(Block.COBBLESTONE, 7, -5, -3), s(Block.COBBLESTONE, 6, -5, -3), s(Block.COBBLESTONE, 5, -5, -3), s(Block.COBBLESTONE, 4, -5, -3), s(Block.COBBLESTONE, 3, -5, -3), s(Block.COBBLESTONE, 2, -5, -3), s(Block.COBBLESTONE, 1, -5, -3), s(Block.COBBLESTONE, 0, -5, -3), s(Block.COBBLESTONE, -1, -5, -3), s(Block.COBBLESTONE, 8, -5, -1), s(Block.COBBLESTONE, 7, -5, -1), s(Block.COBBLESTONE, 6, -5, -1), s(Block.COBBLESTONE, 5, -5, -1), s(Block.COBBLESTONE, 4, -5, -1), s(Block.COBBLESTONE, 2, -5, -1), s(Block.COBBLESTONE, -1, -5, -1), s(Block.COBBLESTONE, 0, -5, -1), s(Block.COBBLESTONE, 1, -5, -1), s(Block.COBBLESTONE, 3, -5, -1), s(Block.COBBLESTONE, 8, -5, -2), s(Block.COBBLESTONE, 7, -5, -2), s(Block.COBBLESTONE, 6, -5, -2), s(Block.COBBLESTONE, 5, -5, -2), s(Block.COBBLESTONE, 4, -5, -2), s(Block.COBBLESTONE, 3, -5, -2), s(Block.COBBLESTONE, 2, -5, -2), s(Block.COBBLESTONE, 1, -5, -2), s(Block.COBBLESTONE, 0, -5, -2), s(Block.COBBLESTONE, -1, -5, -2), s(Block.COBBLESTONE, 8, -6, -2), s(Block.COBBLESTONE, 8, -6, -1), s(Block.COBBLESTONE, 7, -6, -2), s(Block.COBBLESTONE, 7, -6, -1), s(Block.COBBLESTONE, 6, -6, -2), s(Block.COBBLESTONE, 6, -6, -1), s(Block.COBBLESTONE, 5, -6, -2), s(Block.COBBLESTONE, 5, -6, -1), s(Block.COBBLESTONE, 4, -6, -2), s(Block.COBBLESTONE, 4, -6, -1), s(Block.COBBLESTONE, 3, -6, -2), s(Block.COBBLESTONE, 3, -6, -1), s(Block.COBBLESTONE, 2, -6, -2), s(Block.COBBLESTONE, 2, -6, -1), s(Block.COBBLESTONE, 1, -6, -1), s(Block.COBBLESTONE, 0, -6, -1), s(Block.COBBLESTONE, 1, -6, -2), s(Block.COBBLESTONE, 0, -6, -2), s(Block.COBBLESTONE, -1, -6, -2), s(Block.COBBLESTONE, -1, -6, -1), s(Block.PLANKS, 0, -3, -3), s(Block.PLANKS, 0, 
        -4, -2), s(Block.PLANKS, 0, -4, -1), s(Block.PLANKS, 0, -3, 0), s(Block.GLASS, 0, -3, -2), s(Block.GLASS, 0, -3, -1), s(Block.GLASS, 2, -2, 1), s(Block.GLASS, 5, -2, 1), s(Block.GLASS, 6, -2, 1), s(Block.GLASS, 1, -2, 
        1), s(Block.GLASS, 6, -2, -4), s(Block.GLASS, 5, -2, -4), s(Block.GLASS, 1, -2, -4), s(Block.GLASS, 2, -2, -4), s(Block.PLANKS, 7, -3, -3), s(Block.PLANKS, 7, -4, -2), s(Block.PLANKS, 7, -4, -1), s(Block.PLANKS, 7, -3, 0), s(Block.GLASS, 7, -3, -2), s(Block.GLASS, 7, -3, -1), s(Block.COBBLESTONE, 9, -3, 2), s(Block.COBBLESTONE, 9, -4, 1), s(Block.COBBLESTONE, 9, -5, 0), s(Block.COBBLESTONE, 9, -6, -1), s(Block.COBBLESTONE, 9, -6, -2), s(Block.COBBLESTONE, 9, -5, -3), s(Block.COBBLESTONE, 9, -4, -4), s(Block.COBBLESTONE, 9, -3, -5), s(Block.COBBLESTONE, -2, -3, -5), s(Block.COBBLESTONE, -2, -4, -4), s(Block.COBBLESTONE, -2, -5, -3), s(Block.COBBLESTONE, -2, -6, -2), s(Block.COBBLESTONE, -2, -6, -1), s(Block.COBBLESTONE, -2, -5, 0), s(Block.COBBLESTONE, -2, -4, 1), s(Block.COBBLESTONE, -2, -3, 2), s(Block.WOOL[14], 7, 0, -2), s(Block.WOOL[14], 7, 0, -1), s(Block.GRAVEL, 8, 1, -1), s(Block.GRAVEL, 9, 1, -1), s(Block.GRAVEL, 10, 1, -1), s(Block.GRAVEL, 8, 1, -2), s(Block.GRAVEL, 9, 1, -2), s(Block.GRAVEL, 10, 1, -2), s(Block.GRAVEL, 11, 1, -1), s(Block.GRAVEL, 11, 1, -2), s(Block.GRAVEL, 12, 1, -1), s(Block.GRAVEL, 13, 1, -2), s(Block.GRAVEL, 15, 1, -1), s(Block.LOG, 1, -1, 0), s(Block.LOG, 1, -1, -3), s(Block.LOG, 1, -2, 0), s(Block.LOG, 1, -2, -3), s(Block.WOOL[12], 2, -1, -1), s(Block.WOOL[12], 2, -1, -2), s(Block.WOOL[12], 3, -1, -1), s(Block.WOOL[12], 3, -1, -2), s(Block.SNOW, 1, -1, -1), s(Block.SNOW, 1, -1, -2), s(Block.LOG, 4, -1, 0), s(Block.LOG, 4, -2, 0), s(Block.LOG, 4, -1, -3), s(Block.LOG, 4, -2, -3)});

    private blockInStructure[] blocks;

    private Structures(blockInStructure[] blocks) {
        this.blocks = blocks;
    }

    public blockInStructure[] getStructure() {
        return this.blocks;
    }

    	//shorter way of new Structure
	public static blockInStructure s(Block block, int x, int y, int z) {
		return new blockInStructure(block, x, y, z);
	}

    
}
